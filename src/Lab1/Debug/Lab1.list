
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb8  08003bb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc0  08003bc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08003c38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003c38  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a94e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001796  00000000  00000000  0002a9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b2a  00000000  00000000  0002d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7e3  00000000  00000000  00052d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7b94  00000000  00000000  0005d56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  00145154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b08 	.word	0x08003b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b08 	.word	0x08003b08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fa59 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f84d 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8cd 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f89b 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 800058a:	f000 f8c9 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f897 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f000 fd79 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fd73 	bl	8001090 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
	  int32_t len = sprintf(msg_buff, "LED HAS BLINKED %ld TIMES\r\n", counter);
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <main+0x98>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4917      	ldr	r1, [pc, #92]	; (8000610 <main+0x9c>)
 80005b2:	4818      	ldr	r0, [pc, #96]	; (8000614 <main+0xa0>)
 80005b4:	f002 fe3a 	bl	800322c <siprintf>
 80005b8:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg_buff, len,1000);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	4914      	ldr	r1, [pc, #80]	; (8000614 <main+0xa0>)
 80005c4:	4814      	ldr	r0, [pc, #80]	; (8000618 <main+0xa4>)
 80005c6:	f002 f903 	bl	80027d0 <HAL_UART_Transmit>
	  counter++;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <main+0x98>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <main+0x98>)
 80005d2:	6013      	str	r3, [r2, #0]


	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005d4:	2101      	movs	r1, #1
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f000 fd71 	bl	80010c0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005de:	2120      	movs	r1, #32
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fd6c 	bl	80010c0 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80005e8:	20c8      	movs	r0, #200	; 0xc8
 80005ea:	f000 fa9d 	bl	8000b28 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005ee:	2101      	movs	r1, #1
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f000 fd64 	bl	80010c0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f000 fd5f 	bl	80010c0 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8000602:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000606:	f000 fa8f 	bl	8000b28 <HAL_Delay>
  {
 800060a:	e7ce      	b.n	80005aa <main+0x36>
 800060c:	20000174 	.word	0x20000174
 8000610:	08003b20 	.word	0x08003b20
 8000614:	20000110 	.word	0x20000110
 8000618:	2000008c 	.word	0x2000008c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fdf6 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000642:	f000 fd65 	bl	8001110 <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 f8ce 	bl	80007ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066a:	230a      	movs	r3, #10
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fd9c 	bl	80011bc <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800068a:	f000 f8af 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f964 	bl	8001974 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f89b 	bl	80007ec <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3758      	adds	r7, #88	; 0x58
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART2_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x58>)
 8000704:	f002 f816 	bl	8002734 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f86d 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PinOut_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2121      	movs	r1, #33	; 0x21
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fc77 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xc8>)
 80007ba:	f000 fabf 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PinOut_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PinOut_Pin|LD2_Pin;
 80007be:	2321      	movs	r3, #33	; 0x21
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 fab0 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000800 	.word	0x48000800

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6613      	str	r3, [r2, #96]	; 0x60
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0ac      	sub	sp, #176	; 0xb0
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2288      	movs	r2, #136	; 0x88
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fcdb 	bl	800321c <memset>
  if(huart->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_UART_MspInit+0xb0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d13b      	bne.n	80008e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fa9d 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000888:	f7ff ffb0 	bl	80007ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 8000892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000896:	6593      	str	r3, [r2, #88]	; 0x58
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008bc:	230c      	movs	r3, #12
 80008be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d4:	2307      	movs	r3, #7
 80008d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fa2a 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	37b0      	adds	r7, #176	; 0xb0
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8d0 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f002 fc24 	bl	80031c8 <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20018000 	.word	0x20018000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	20000178 	.word	0x20000178
 80009b4:	20000190 	.word	0x20000190

080009b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 fbe3 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0e:	f7ff fdb1 	bl	8000574 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a20:	08003bc8 	.word	0x08003bc8
  ldr r2, =_sbss
 8000a24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a28:	20000190 	.word	0x20000190

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_Init+0x3c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_Init+0x3c>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a46:	2003      	movs	r0, #3
 8000a48:	f000 f944 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f80f 	bl	8000a70 <HAL_InitTick>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	e001      	b.n	8000a62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5e:	f7ff fecb 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_InitTick+0x6c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d023      	beq.n	8000acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_InitTick+0x70>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_InitTick+0x6c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f941 	bl	8000d22 <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10f      	bne.n	8000ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d809      	bhi.n	8000ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f919 	bl	8000cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_InitTick+0x74>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e007      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e001      	b.n	8000ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	2000017c 	.word	0x2000017c

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000017c 	.word	0x2000017c

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff47 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff5c 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffb0 	bl	8000c90 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e17f      	b.n	800104c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8171 	beq.w	8001046 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d118      	bne.n	8000e1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000df0:	2201      	movs	r2, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	f003 0201 	and.w	r2, r3, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d017      	beq.n	8000e58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ac 	beq.w	8001046 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <HAL_GPIO_Init+0x330>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a5e      	ldr	r2, [pc, #376]	; (800106c <HAL_GPIO_Init+0x330>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <HAL_GPIO_Init+0x330>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f06:	4a5a      	ldr	r2, [pc, #360]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f30:	d025      	beq.n	8000f7e <HAL_GPIO_Init+0x242>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x338>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01f      	beq.n	8000f7a <HAL_GPIO_Init+0x23e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x33c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x23a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x340>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x236>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x344>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x232>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x348>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x22e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x34c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x22a>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f90:	4937      	ldr	r1, [pc, #220]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <HAL_GPIO_Init+0x350>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_GPIO_Init+0x350>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_GPIO_Init+0x350>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_GPIO_Init+0x350>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f ae78 	bne.w	8000d4c <HAL_GPIO_Init+0x10>
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	48001000 	.word	0x48001000
 8001084:	48001400 	.word	0x48001400
 8001088:	48001800 	.word	0x48001800
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43d9      	mvns	r1, r3
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	400b      	ands	r3, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_PWREx_GetVoltageRange+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111e:	d130      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112c:	d038      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001136:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2232      	movs	r2, #50	; 0x32
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9b      	lsrs	r3, r3, #18
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	e002      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d102      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f2      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117c:	d110      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e00f      	b.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118e:	d007      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001198:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83

080011bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e3ca      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ce:	4b97      	ldr	r3, [pc, #604]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d8:	4b94      	ldr	r3, [pc, #592]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80e4 	beq.w	80013b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_RCC_OscConfig+0x4a>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	f040 808b 	bne.w	8001314 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b01      	cmp	r3, #1
 8001202:	f040 8087 	bne.w	8001314 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001206:	4b89      	ldr	r3, [pc, #548]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x62>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e3a2      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	4b82      	ldr	r3, [pc, #520]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_RCC_OscConfig+0x7c>
 800122e:	4b7f      	ldr	r3, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001236:	e005      	b.n	8001244 <HAL_RCC_OscConfig+0x88>
 8001238:	4b7c      	ldr	r3, [pc, #496]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800123a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001244:	4293      	cmp	r3, r2
 8001246:	d223      	bcs.n	8001290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fd55 	bl	8001cfc <RCC_SetFlashLatencyFromMSIRange>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e383      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4b73      	ldr	r3, [pc, #460]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a72      	ldr	r2, [pc, #456]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b70      	ldr	r3, [pc, #448]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	496d      	ldr	r1, [pc, #436]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4968      	ldr	r1, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e025      	b.n	80012dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001290:	4b66      	ldr	r3, [pc, #408]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a65      	ldr	r2, [pc, #404]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4960      	ldr	r1, [pc, #384]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	495b      	ldr	r1, [pc, #364]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fd15 	bl	8001cfc <RCC_SetFlashLatencyFromMSIRange>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e343      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012dc:	f000 fc4a 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b52      	ldr	r3, [pc, #328]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	4950      	ldr	r1, [pc, #320]	; (8001430 <HAL_RCC_OscConfig+0x274>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <HAL_RCC_OscConfig+0x278>)
 80012fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012fc:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <HAL_RCC_OscConfig+0x27c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fbb5 	bl	8000a70 <HAL_InitTick>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d052      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	e327      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d032      	beq.n	8001382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001328:	f7ff fbf2 	bl	8000b10 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001330:	f7ff fbee 	bl	8000b10 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e310      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a36      	ldr	r2, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4931      	ldr	r1, [pc, #196]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	492c      	ldr	r1, [pc, #176]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e01a      	b.n	80013b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138e:	f7ff fbbf 	bl	8000b10 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001396:	f7ff fbbb 	bl	8000b10 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2dd      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x1da>
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d074      	beq.n	80014ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x21a>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	d10e      	bne.n	80013ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d10b      	bne.n	80013ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d064      	beq.n	80014ac <HAL_RCC_OscConfig+0x2f0>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d160      	bne.n	80014ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e2ba      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x24a>
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_RCC_OscConfig+0x270>)
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e026      	b.n	8001454 <HAL_RCC_OscConfig+0x298>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140e:	d115      	bne.n	800143c <HAL_RCC_OscConfig+0x280>
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a02      	ldr	r2, [pc, #8]	; (800142c <HAL_RCC_OscConfig+0x270>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e014      	b.n	8001454 <HAL_RCC_OscConfig+0x298>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	08003b3c 	.word	0x08003b3c
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004
 800143c:	4ba0      	ldr	r3, [pc, #640]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a9f      	ldr	r2, [pc, #636]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b9d      	ldr	r3, [pc, #628]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a9c      	ldr	r2, [pc, #624]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fb58 	bl	8000b10 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fb54 	bl	8000b10 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e276      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x2a8>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fb44 	bl	8000b10 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fb40 	bl	8000b10 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e262      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x2d0>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d060      	beq.n	800157c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x310>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d116      	bne.n	80014fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x328>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e23f      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	4973      	ldr	r1, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f8:	e040      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d023      	beq.n	800154a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6e      	ldr	r2, [pc, #440]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff faff 	bl	8000b10 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fafb 	bl	8000b10 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e21d      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	495f      	ldr	r1, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fadb 	bl	8000b10 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fad7 	bl	8000b10 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1f9      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03c      	beq.n	8001602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01c      	beq.n	80015ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001596:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fab6 	bl	8000b10 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fab2 	bl	8000b10 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1d4      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ef      	beq.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
 80015c8:	e01b      	b.n	8001602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d0:	4a3b      	ldr	r2, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff fa99 	bl	8000b10 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fa95 	bl	8000b10 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1b7      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ef      	bne.n	80015e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80a6 	beq.w	800175c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162a:	6593      	str	r3, [r2, #88]	; 0x58
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001638:	2301      	movs	r3, #1
 800163a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x508>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d118      	bne.n	800167a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_OscConfig+0x508>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_RCC_OscConfig+0x508>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001654:	f7ff fa5c 	bl	8000b10 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7ff fa58 	bl	8000b10 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e17a      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_RCC_OscConfig+0x508>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x4d8>
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001692:	e029      	b.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d115      	bne.n	80016c8 <HAL_RCC_OscConfig+0x50c>
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b2:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
 80016c8:	4b9c      	ldr	r3, [pc, #624]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	4a9b      	ldr	r2, [pc, #620]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d8:	4b98      	ldr	r3, [pc, #608]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	4a97      	ldr	r2, [pc, #604]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d016      	beq.n	800171e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fa0e 	bl	8000b10 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fa0a 	bl	8000b10 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e12a      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ed      	beq.n	80016f8 <HAL_RCC_OscConfig+0x53c>
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff f9f7 	bl	8000b10 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff f9f3 	bl	8000b10 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e113      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173c:	4b7f      	ldr	r3, [pc, #508]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ed      	bne.n	8001726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001750:	4b7a      	ldr	r3, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a79      	ldr	r2, [pc, #484]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80fe 	beq.w	8001962 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	2b02      	cmp	r3, #2
 800176c:	f040 80d0 	bne.w	8001910 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001770:	4b72      	ldr	r3, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	429a      	cmp	r2, r3
 8001782:	d130      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	3b01      	subs	r3, #1
 8001790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d127      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d11f      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b0:	2a07      	cmp	r2, #7
 80017b2:	bf14      	ite	ne
 80017b4:	2201      	movne	r2, #1
 80017b6:	2200      	moveq	r2, #0
 80017b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d113      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	3b01      	subs	r3, #1
 80017cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	3b01      	subs	r3, #1
 80017e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d06e      	beq.n	80018c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d069      	beq.n	80018c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0ad      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800180e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001814:	f7ff f97c 	bl	8000b10 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff f978 	bl	8000b10 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e09a      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	4b40      	ldr	r3, [pc, #256]	; (8001940 <HAL_RCC_OscConfig+0x784>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800184a:	3a01      	subs	r2, #1
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001854:	0212      	lsls	r2, r2, #8
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800185c:	0852      	lsrs	r2, r2, #1
 800185e:	3a01      	subs	r2, #1
 8001860:	0552      	lsls	r2, r2, #21
 8001862:	4311      	orrs	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001868:	0852      	lsrs	r2, r2, #1
 800186a:	3a01      	subs	r2, #1
 800186c:	0652      	lsls	r2, r2, #25
 800186e:	4311      	orrs	r1, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001874:	0912      	lsrs	r2, r2, #4
 8001876:	0452      	lsls	r2, r2, #17
 8001878:	430a      	orrs	r2, r1
 800187a:	4930      	ldr	r1, [pc, #192]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800187c:	4313      	orrs	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2d      	ldr	r2, [pc, #180]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a2a      	ldr	r2, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001898:	f7ff f93a 	bl	8000b10 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f936 	bl	8000b10 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e058      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018be:	e050      	b.n	8001962 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04f      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d148      	bne.n	8001962 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_RCC_OscConfig+0x780>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e8:	f7ff f912 	bl	8000b10 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f90e 	bl	8000b10 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e030      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x734>
 800190e:	e028      	b.n	8001962 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d023      	beq.n	800195e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_OscConfig+0x780>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x780>)
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f8f5 	bl	8000b10 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	e00c      	b.n	8001944 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f8f1 	bl	8000b10 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d905      	bls.n	8001944 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e013      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
 800193c:	40021000 	.word	0x40021000
 8001940:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x7b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ec      	bne.n	800192a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x7b0>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4905      	ldr	r1, [pc, #20]	; (800196c <HAL_RCC_OscConfig+0x7b0>)
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x7b4>)
 8001958:	4013      	ands	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
 800195c:	e001      	b.n	8001962 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	feeefffc 	.word	0xfeeefffc

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0e7      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4970      	ldr	r1, [pc, #448]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cf      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d908      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4960      	ldr	r1, [pc, #384]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d04c      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d121      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0a6      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e09a      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2a:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e08e      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e086      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4943      	ldr	r1, [pc, #268]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5c:	f7ff f858 	bl	8000b10 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff f854 	bl	8000b10 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06e      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d208      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	492b      	ldr	r1, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d210      	bcs.n	8001aea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 0207 	bic.w	r2, r3, #7
 8001ad0:	4923      	ldr	r1, [pc, #140]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e036      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4910      	ldr	r1, [pc, #64]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b28:	f000 f824 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	490b      	ldr	r1, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1f4>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1fc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe ff8f 	bl	8000a70 <HAL_InitTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b56:	7afb      	ldrb	r3, [r7, #11]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08003b3c 	.word	0x08003b3c
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d121      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d11e      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d134      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d003      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0xac>
 8001c18:	e005      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c22:	617b      	str	r3, [r7, #20]
      break;
 8001c24:	e002      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	3301      	adds	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0e5b      	lsrs	r3, r3, #25
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08003b54 	.word	0x08003b54
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08003b4c 	.word	0x08003b4c

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cd4:	f7ff ffda 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08003b4c 	.word	0x08003b4c

08001cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d14:	f7ff f9ee 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001d18:	6178      	str	r0, [r7, #20]
 8001d1a:	e014      	b.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d34:	f7ff f9de 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d10b      	bne.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d919      	bls.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2ba0      	cmp	r3, #160	; 0xa0
 8001d58:	d902      	bls.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e013      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e010      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	d902      	bls.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e00a      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d102      	bne.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d78:	2302      	movs	r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e004      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b70      	cmp	r3, #112	; 0x70
 8001d82:	d101      	bne.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 0207 	bic.w	r2, r3, #7
 8001d90:	4909      	ldr	r1, [pc, #36]	; (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dc8:	2300      	movs	r3, #0
 8001dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d041      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001de0:	d02a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001de6:	d824      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dec:	d008      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001df2:	d81e      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dfe:	e018      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e00:	4b86      	ldr	r3, [pc, #536]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a85      	ldr	r2, [pc, #532]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0c:	e015      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fabb 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e1e:	e00c      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3320      	adds	r3, #32
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fba6 	bl	8002578 <RCCEx_PLLSAI2_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e30:	e003      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	74fb      	strb	r3, [r7, #19]
      break;
 8001e36:	e000      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e40:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e4e:	4973      	ldr	r1, [pc, #460]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e56:	e001      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d041      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e70:	d02a      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e76:	d824      	bhi.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e7c:	d008      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e82:	d81e      	bhi.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d010      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e90:	4b62      	ldr	r3, [pc, #392]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a61      	ldr	r2, [pc, #388]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9c:	e015      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fa73 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eae:	e00c      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3320      	adds	r3, #32
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fb5e 	bl	8002578 <RCCEx_PLLSAI2_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec0:	e003      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ec6:	e000      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ed0:	4b52      	ldr	r3, [pc, #328]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ede:	494f      	ldr	r1, [pc, #316]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ee6:	e001      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a0 	beq.w	800203a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a40      	ldr	r2, [pc, #256]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fde8 	bl	8000b10 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f42:	e009      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7fe fde4 	bl	8000b10 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d902      	bls.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	74fb      	strb	r3, [r7, #19]
        break;
 8001f56:	e005      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ef      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d15c      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01f      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d019      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fda3 	bl	8000b10 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe fd9f 	bl	8000b10 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d902      	bls.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fe4:	e006      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ec      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200a:	4904      	ldr	r1, [pc, #16]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002012:	e009      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
 8002018:	e006      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002028:	7c7b      	ldrb	r3, [r7, #17]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a9d      	ldr	r2, [pc, #628]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002046:	4b98      	ldr	r3, [pc, #608]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204c:	f023 0203 	bic.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	4994      	ldr	r1, [pc, #592]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002068:	4b8f      	ldr	r3, [pc, #572]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f023 020c 	bic.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	498c      	ldr	r1, [pc, #560]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800208a:	4b87      	ldr	r3, [pc, #540]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4983      	ldr	r1, [pc, #524]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020ac:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	497b      	ldr	r1, [pc, #492]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020dc:	4972      	ldr	r1, [pc, #456]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	496a      	ldr	r1, [pc, #424]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	4961      	ldr	r1, [pc, #388]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002134:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	4959      	ldr	r1, [pc, #356]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002164:	4950      	ldr	r1, [pc, #320]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002178:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	4948      	ldr	r1, [pc, #288]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	493f      	ldr	r1, [pc, #252]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d028      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ca:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021da:	d106      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
 80021e8:	e011      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f2:	d10c      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	2101      	movs	r1, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f8c8 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	491f      	ldr	r1, [pc, #124]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002238:	d106      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002244:	60d3      	str	r3, [r2, #12]
 8002246:	e011      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002250:	d10c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f899 	bl	8002390 <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02b      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002296:	d109      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a2:	60d3      	str	r3, [r2, #12]
 80022a4:	e014      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f867 	bl	8002390 <RCCEx_PLLSAI1_Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d02f      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ea:	4928      	ldr	r1, [pc, #160]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022fa:	d10d      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f844 	bl	8002390 <RCCEx_PLLSAI1_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	74bb      	strb	r3, [r7, #18]
 8002316:	e011      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800231c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002320:	d10c      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3320      	adds	r3, #32
 8002326:	2102      	movs	r1, #2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f925 	bl	8002578 <RCCEx_PLLSAI2_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002356:	490d      	ldr	r1, [pc, #52]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237a:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002382:	7cbb      	ldrb	r3, [r7, #18]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d018      	beq.n	80023dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d10d      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
       ||
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023c2:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
       ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d047      	beq.n	8002466 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e044      	b.n	8002466 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d018      	beq.n	8002416 <RCCEx_PLLSAI1_Config+0x86>
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d825      	bhi.n	8002434 <RCCEx_PLLSAI1_Config+0xa4>
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d002      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x62>
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d009      	beq.n	8002404 <RCCEx_PLLSAI1_Config+0x74>
 80023f0:	e020      	b.n	8002434 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023f2:	4b60      	ldr	r3, [pc, #384]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11d      	bne.n	800243a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e01a      	b.n	800243a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002404:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d116      	bne.n	800243e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e013      	b.n	800243e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10f      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002432:	e006      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e004      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002442:	bf00      	nop
    }

    if(status == HAL_OK)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800244a:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	430b      	orrs	r3, r1
 8002460:	4944      	ldr	r1, [pc, #272]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d17d      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a40      	ldr	r2, [pc, #256]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002478:	f7fe fb4a 	bl	8000b10 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800247e:	e009      	b.n	8002494 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002480:	f7fe fb46 	bl	8000b10 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d902      	bls.n	8002494 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	73fb      	strb	r3, [r7, #15]
        break;
 8002492:	e005      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002494:	4b37      	ldr	r3, [pc, #220]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ef      	bne.n	8002480 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d160      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d111      	bne.n	80024d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6892      	ldr	r2, [r2, #8]
 80024bc:	0211      	lsls	r1, r2, #8
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	0912      	lsrs	r2, r2, #4
 80024c4:	0452      	lsls	r2, r2, #17
 80024c6:	430a      	orrs	r2, r1
 80024c8:	492a      	ldr	r1, [pc, #168]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	610b      	str	r3, [r1, #16]
 80024ce:	e027      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d112      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6892      	ldr	r2, [r2, #8]
 80024e6:	0211      	lsls	r1, r2, #8
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6912      	ldr	r2, [r2, #16]
 80024ec:	0852      	lsrs	r2, r2, #1
 80024ee:	3a01      	subs	r2, #1
 80024f0:	0552      	lsls	r2, r2, #21
 80024f2:	430a      	orrs	r2, r1
 80024f4:	491f      	ldr	r1, [pc, #124]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	610b      	str	r3, [r1, #16]
 80024fa:	e011      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	0211      	lsls	r1, r2, #8
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6952      	ldr	r2, [r2, #20]
 8002512:	0852      	lsrs	r2, r2, #1
 8002514:	3a01      	subs	r2, #1
 8002516:	0652      	lsls	r2, r2, #25
 8002518:	430a      	orrs	r2, r1
 800251a:	4916      	ldr	r1, [pc, #88]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a13      	ldr	r2, [pc, #76]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800252a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe faf0 	bl	8000b10 <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002532:	e009      	b.n	8002548 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002534:	f7fe faec 	bl	8000b10 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d902      	bls.n	8002548 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	73fb      	strb	r3, [r7, #15]
          break;
 8002546:	e005      	b.n	8002554 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4904      	ldr	r1, [pc, #16]	; (8002574 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
       ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025aa:	4b61      	ldr	r3, [pc, #388]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d047      	beq.n	800264e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e044      	b.n	800264e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d018      	beq.n	80025fe <RCCEx_PLLSAI2_Config+0x86>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d825      	bhi.n	800261c <RCCEx_PLLSAI2_Config+0xa4>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <RCCEx_PLLSAI2_Config+0x62>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <RCCEx_PLLSAI2_Config+0x74>
 80025d8:	e020      	b.n	800261c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025da:	4b55      	ldr	r3, [pc, #340]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11d      	bne.n	8002622 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e01a      	b.n	8002622 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e013      	b.n	8002626 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261a:	e006      	b.n	800262a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262a:	bf00      	nop
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	430b      	orrs	r3, r1
 8002648:	4939      	ldr	r1, [pc, #228]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d167      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a35      	ldr	r2, [pc, #212]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fa56 	bl	8000b10 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002668:	f7fe fa52 	bl	8000b10 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800267c:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d14a      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	0912      	lsrs	r2, r2, #4
 80026ac:	0452      	lsls	r2, r2, #17
 80026ae:	430a      	orrs	r2, r1
 80026b0:	491f      	ldr	r1, [pc, #124]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	614b      	str	r3, [r1, #20]
 80026b6:	e011      	b.n	80026dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6912      	ldr	r2, [r2, #16]
 80026ce:	0852      	lsrs	r2, r2, #1
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0652      	lsls	r2, r2, #25
 80026d4:	430a      	orrs	r2, r1
 80026d6:	4916      	ldr	r1, [pc, #88]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a13      	ldr	r2, [pc, #76]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fa12 	bl	8000b10 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ee:	e009      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026f0:	f7fe fa0e 	bl	8000b10 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	73fb      	strb	r3, [r7, #15]
          break;
 8002702:	e005      	b.n	8002710 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4904      	ldr	r1, [pc, #16]	; (8002730 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e040      	b.n	80027c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f872 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8c0 	bl	80028f8 <UART_SetConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fb6c 	bl	8002e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fbf3 	bl	8002fac <UART_CheckIdleState>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	f040 8082 	bne.w	80028ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_UART_Transmit+0x26>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07a      	b.n	80028f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x38>
 8002804:	2302      	movs	r3, #2
 8002806:	e073      	b.n	80028f0 <HAL_UART_Transmit+0x120>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2221      	movs	r2, #33	; 0x21
 800281c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281e:	f7fe f977 	bl	8000b10 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d108      	bne.n	8002850 <HAL_UART_Transmit+0x80>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e003      	b.n	8002858 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002860:	e02d      	b.n	80028be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fbe6 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e039      	b.n	80028f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288e:	b292      	uxth	r2, r2
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3302      	adds	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e008      	b.n	80028ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b292      	uxth	r2, r2
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cb      	bne.n	8002862 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fbb2 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e005      	b.n	80028f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b08a      	sub	sp, #40	; 0x28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	431a      	orrs	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4313      	orrs	r3, r2
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4ba4      	ldr	r3, [pc, #656]	; (8002bb8 <UART_SetConfig+0x2c0>)
 8002928:	4013      	ands	r3, r2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002930:	430b      	orrs	r3, r1
 8002932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a99      	ldr	r2, [pc, #612]	; (8002bbc <UART_SetConfig+0x2c4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	4313      	orrs	r3, r2
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	430a      	orrs	r2, r1
 8002976:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <UART_SetConfig+0x2c8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d126      	bne.n	80029d0 <UART_SetConfig+0xd8>
 8002982:	4b90      	ldr	r3, [pc, #576]	; (8002bc4 <UART_SetConfig+0x2cc>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b03      	cmp	r3, #3
 800298e:	d81b      	bhi.n	80029c8 <UART_SetConfig+0xd0>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <UART_SetConfig+0xa0>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029a9 	.word	0x080029a9
 800299c:	080029b9 	.word	0x080029b9
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c1 	.word	0x080029c1
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ae:	e116      	b.n	8002bde <UART_SetConfig+0x2e6>
 80029b0:	2302      	movs	r3, #2
 80029b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b6:	e112      	b.n	8002bde <UART_SetConfig+0x2e6>
 80029b8:	2304      	movs	r3, #4
 80029ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029be:	e10e      	b.n	8002bde <UART_SetConfig+0x2e6>
 80029c0:	2308      	movs	r3, #8
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029c6:	e10a      	b.n	8002bde <UART_SetConfig+0x2e6>
 80029c8:	2310      	movs	r3, #16
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ce:	e106      	b.n	8002bde <UART_SetConfig+0x2e6>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a7c      	ldr	r2, [pc, #496]	; (8002bc8 <UART_SetConfig+0x2d0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d138      	bne.n	8002a4c <UART_SetConfig+0x154>
 80029da:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <UART_SetConfig+0x2cc>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d82d      	bhi.n	8002a44 <UART_SetConfig+0x14c>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <UART_SetConfig+0xf8>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a25 	.word	0x08002a25
 80029f4:	08002a45 	.word	0x08002a45
 80029f8:	08002a45 	.word	0x08002a45
 80029fc:	08002a45 	.word	0x08002a45
 8002a00:	08002a35 	.word	0x08002a35
 8002a04:	08002a45 	.word	0x08002a45
 8002a08:	08002a45 	.word	0x08002a45
 8002a0c:	08002a45 	.word	0x08002a45
 8002a10:	08002a2d 	.word	0x08002a2d
 8002a14:	08002a45 	.word	0x08002a45
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a45 	.word	0x08002a45
 8002a20:	08002a3d 	.word	0x08002a3d
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a2a:	e0d8      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a32:	e0d4      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a34:	2304      	movs	r3, #4
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a3a:	e0d0      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a42:	e0cc      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a44:	2310      	movs	r3, #16
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a4a:	e0c8      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <UART_SetConfig+0x2d4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d125      	bne.n	8002aa2 <UART_SetConfig+0x1aa>
 8002a56:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <UART_SetConfig+0x2cc>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a60:	2b30      	cmp	r3, #48	; 0x30
 8002a62:	d016      	beq.n	8002a92 <UART_SetConfig+0x19a>
 8002a64:	2b30      	cmp	r3, #48	; 0x30
 8002a66:	d818      	bhi.n	8002a9a <UART_SetConfig+0x1a2>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d00a      	beq.n	8002a82 <UART_SetConfig+0x18a>
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d814      	bhi.n	8002a9a <UART_SetConfig+0x1a2>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <UART_SetConfig+0x182>
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d008      	beq.n	8002a8a <UART_SetConfig+0x192>
 8002a78:	e00f      	b.n	8002a9a <UART_SetConfig+0x1a2>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a80:	e0ad      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a82:	2302      	movs	r3, #2
 8002a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a88:	e0a9      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a90:	e0a5      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a92:	2308      	movs	r3, #8
 8002a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a98:	e0a1      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002a9a:	2310      	movs	r3, #16
 8002a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa0:	e09d      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <UART_SetConfig+0x2d8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d125      	bne.n	8002af8 <UART_SetConfig+0x200>
 8002aac:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <UART_SetConfig+0x2cc>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ab8:	d016      	beq.n	8002ae8 <UART_SetConfig+0x1f0>
 8002aba:	2bc0      	cmp	r3, #192	; 0xc0
 8002abc:	d818      	bhi.n	8002af0 <UART_SetConfig+0x1f8>
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d00a      	beq.n	8002ad8 <UART_SetConfig+0x1e0>
 8002ac2:	2b80      	cmp	r3, #128	; 0x80
 8002ac4:	d814      	bhi.n	8002af0 <UART_SetConfig+0x1f8>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <UART_SetConfig+0x1d8>
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d008      	beq.n	8002ae0 <UART_SetConfig+0x1e8>
 8002ace:	e00f      	b.n	8002af0 <UART_SetConfig+0x1f8>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ad6:	e082      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ade:	e07e      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ae6:	e07a      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002ae8:	2308      	movs	r3, #8
 8002aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aee:	e076      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002af0:	2310      	movs	r3, #16
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002af6:	e072      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <UART_SetConfig+0x2dc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12a      	bne.n	8002b58 <UART_SetConfig+0x260>
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <UART_SetConfig+0x2cc>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b10:	d01a      	beq.n	8002b48 <UART_SetConfig+0x250>
 8002b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b16:	d81b      	bhi.n	8002b50 <UART_SetConfig+0x258>
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	d00c      	beq.n	8002b38 <UART_SetConfig+0x240>
 8002b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b22:	d815      	bhi.n	8002b50 <UART_SetConfig+0x258>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <UART_SetConfig+0x238>
 8002b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b2c:	d008      	beq.n	8002b40 <UART_SetConfig+0x248>
 8002b2e:	e00f      	b.n	8002b50 <UART_SetConfig+0x258>
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b36:	e052      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b3e:	e04e      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002b40:	2304      	movs	r3, #4
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b46:	e04a      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002b48:	2308      	movs	r3, #8
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b4e:	e046      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002b50:	2310      	movs	r3, #16
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b56:	e042      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <UART_SetConfig+0x2c4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d13a      	bne.n	8002bd8 <UART_SetConfig+0x2e0>
 8002b62:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <UART_SetConfig+0x2cc>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b70:	d01a      	beq.n	8002ba8 <UART_SetConfig+0x2b0>
 8002b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b76:	d81b      	bhi.n	8002bb0 <UART_SetConfig+0x2b8>
 8002b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b7c:	d00c      	beq.n	8002b98 <UART_SetConfig+0x2a0>
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b82:	d815      	bhi.n	8002bb0 <UART_SetConfig+0x2b8>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <UART_SetConfig+0x298>
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d008      	beq.n	8002ba0 <UART_SetConfig+0x2a8>
 8002b8e:	e00f      	b.n	8002bb0 <UART_SetConfig+0x2b8>
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b96:	e022      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9e:	e01e      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ba6:	e01a      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002ba8:	2308      	movs	r3, #8
 8002baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bae:	e016      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb6:	e012      	b.n	8002bde <UART_SetConfig+0x2e6>
 8002bb8:	efff69f3 	.word	0xefff69f3
 8002bbc:	40008000 	.word	0x40008000
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40004800 	.word	0x40004800
 8002bd0:	40004c00 	.word	0x40004c00
 8002bd4:	40005000 	.word	0x40005000
 8002bd8:	2310      	movs	r3, #16
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a9f      	ldr	r2, [pc, #636]	; (8002e60 <UART_SetConfig+0x568>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d17a      	bne.n	8002cde <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d824      	bhi.n	8002c3a <UART_SetConfig+0x342>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <UART_SetConfig+0x300>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c3b 	.word	0x08002c3b
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c3b 	.word	0x08002c3b
 8002c08:	08002c2b 	.word	0x08002c2b
 8002c0c:	08002c3b 	.word	0x08002c3b
 8002c10:	08002c3b 	.word	0x08002c3b
 8002c14:	08002c3b 	.word	0x08002c3b
 8002c18:	08002c33 	.word	0x08002c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f7ff f842 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002c20:	61f8      	str	r0, [r7, #28]
        break;
 8002c22:	e010      	b.n	8002c46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c24:	4b8f      	ldr	r3, [pc, #572]	; (8002e64 <UART_SetConfig+0x56c>)
 8002c26:	61fb      	str	r3, [r7, #28]
        break;
 8002c28:	e00d      	b.n	8002c46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2a:	f7fe ffa3 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002c2e:	61f8      	str	r0, [r7, #28]
        break;
 8002c30:	e009      	b.n	8002c46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c36:	61fb      	str	r3, [r7, #28]
        break;
 8002c38:	e005      	b.n	8002c46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80fb 	beq.w	8002e44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d305      	bcc.n	8002c6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d903      	bls.n	8002c72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c70:	e0e8      	b.n	8002e44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2200      	movs	r2, #0
 8002c76:	461c      	mov	r4, r3
 8002c78:	4615      	mov	r5, r2
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	022b      	lsls	r3, r5, #8
 8002c84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c88:	0222      	lsls	r2, r4, #8
 8002c8a:	68f9      	ldr	r1, [r7, #12]
 8002c8c:	6849      	ldr	r1, [r1, #4]
 8002c8e:	0849      	lsrs	r1, r1, #1
 8002c90:	2000      	movs	r0, #0
 8002c92:	4688      	mov	r8, r1
 8002c94:	4681      	mov	r9, r0
 8002c96:	eb12 0a08 	adds.w	sl, r2, r8
 8002c9a:	eb43 0b09 	adc.w	fp, r3, r9
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cac:	4650      	mov	r0, sl
 8002cae:	4659      	mov	r1, fp
 8002cb0:	f7fd fade 	bl	8000270 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc2:	d308      	bcc.n	8002cd6 <UART_SetConfig+0x3de>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cca:	d204      	bcs.n	8002cd6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	60da      	str	r2, [r3, #12]
 8002cd4:	e0b6      	b.n	8002e44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cdc:	e0b2      	b.n	8002e44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce6:	d15e      	bne.n	8002da6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d828      	bhi.n	8002d42 <UART_SetConfig+0x44a>
 8002cf0:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <UART_SetConfig+0x400>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d43 	.word	0x08002d43
 8002d08:	08002d33 	.word	0x08002d33
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d43 	.word	0x08002d43
 8002d14:	08002d43 	.word	0x08002d43
 8002d18:	08002d3b 	.word	0x08002d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7fe ffc2 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002d20:	61f8      	str	r0, [r7, #28]
        break;
 8002d22:	e014      	b.n	8002d4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d24:	f7fe ffd4 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002d28:	61f8      	str	r0, [r7, #28]
        break;
 8002d2a:	e010      	b.n	8002d4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <UART_SetConfig+0x56c>)
 8002d2e:	61fb      	str	r3, [r7, #28]
        break;
 8002d30:	e00d      	b.n	8002d4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7fe ff1f 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002d36:	61f8      	str	r0, [r7, #28]
        break;
 8002d38:	e009      	b.n	8002d4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d3e:	61fb      	str	r3, [r7, #28]
        break;
 8002d40:	e005      	b.n	8002d4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d077      	beq.n	8002e44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005a      	lsls	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	441a      	add	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d916      	bls.n	8002d9e <UART_SetConfig+0x4a6>
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d212      	bcs.n	8002d9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f023 030f 	bic.w	r3, r3, #15
 8002d80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	8afb      	ldrh	r3, [r7, #22]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	8afa      	ldrh	r2, [r7, #22]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e052      	b.n	8002e44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002da4:	e04e      	b.n	8002e44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d827      	bhi.n	8002dfe <UART_SetConfig+0x506>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <UART_SetConfig+0x4bc>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08002de1 	.word	0x08002de1
 8002dbc:	08002de9 	.word	0x08002de9
 8002dc0:	08002dff 	.word	0x08002dff
 8002dc4:	08002def 	.word	0x08002def
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002dff 	.word	0x08002dff
 8002dd0:	08002dff 	.word	0x08002dff
 8002dd4:	08002df7 	.word	0x08002df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7fe ff64 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	61f8      	str	r0, [r7, #28]
        break;
 8002dde:	e014      	b.n	8002e0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002de0:	f7fe ff76 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002de4:	61f8      	str	r0, [r7, #28]
        break;
 8002de6:	e010      	b.n	8002e0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <UART_SetConfig+0x56c>)
 8002dea:	61fb      	str	r3, [r7, #28]
        break;
 8002dec:	e00d      	b.n	8002e0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dee:	f7fe fec1 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002df2:	61f8      	str	r0, [r7, #28]
        break;
 8002df4:	e009      	b.n	8002e0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfa:	61fb      	str	r3, [r7, #28]
        break;
 8002dfc:	e005      	b.n	8002e0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e08:	bf00      	nop
    }

    if (pclk != 0U)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d019      	beq.n	8002e44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	085a      	lsrs	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	441a      	add	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b0f      	cmp	r3, #15
 8002e28:	d909      	bls.n	8002e3e <UART_SetConfig+0x546>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d205      	bcs.n	8002e3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	e002      	b.n	8002e44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3728      	adds	r7, #40	; 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	40008000 	.word	0x40008000
 8002e64:	00f42400 	.word	0x00f42400

08002e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01a      	beq.n	8002f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f66:	d10a      	bne.n	8002f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fbc:	f7fd fda8 	bl	8000b10 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d10e      	bne.n	8002fee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f82d 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e023      	b.n	8003036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d10e      	bne.n	800301a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f817 	bl	800303e <UART_WaitOnFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00d      	b.n	8003036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b09c      	sub	sp, #112	; 0x70
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	e0a5      	b.n	800319c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	f000 80a1 	beq.w	800319c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fd fd59 	bl	8000b10 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <UART_WaitOnFlagUntilTimeout+0x32>
 800306a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306c:	2b00      	cmp	r3, #0
 800306e:	d13e      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003084:	667b      	str	r3, [r7, #100]	; 0x64
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800308e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003090:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800309c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e6      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3308      	adds	r3, #8
 80030c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80030c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e5      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e067      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d04f      	beq.n	800319c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310a:	d147      	bne.n	800319c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003114:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800312a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
 8003136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800313a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e6      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3308      	adds	r3, #8
 800314e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	e853 3f00 	ldrex	r3, [r3]
 8003156:	613b      	str	r3, [r7, #16]
   return(result);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3308      	adds	r3, #8
 8003166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003168:	623a      	str	r2, [r7, #32]
 800316a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	69f9      	ldr	r1, [r7, #28]
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	61bb      	str	r3, [r7, #24]
   return(result);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e5      	bne.n	8003148 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e010      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	f43f af4a 	beq.w	8003050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3770      	adds	r7, #112	; 0x70
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <__errno>:
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <__errno+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	2000000c 	.word	0x2000000c

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4d0d      	ldr	r5, [pc, #52]	; (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2600      	movs	r6, #0
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4d0b      	ldr	r5, [pc, #44]	; (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	; (8003218 <__libc_init_array+0x44>)
 80031e8:	f000 fc8e 	bl	8003b08 <_init>
 80031ec:	1b64      	subs	r4, r4, r5
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2600      	movs	r6, #0
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003bc0 	.word	0x08003bc0
 8003210:	08003bc0 	.word	0x08003bc0
 8003214:	08003bc0 	.word	0x08003bc0
 8003218:	08003bc4 	.word	0x08003bc4

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <siprintf>:
 800322c:	b40e      	push	{r1, r2, r3}
 800322e:	b500      	push	{lr}
 8003230:	b09c      	sub	sp, #112	; 0x70
 8003232:	ab1d      	add	r3, sp, #116	; 0x74
 8003234:	9002      	str	r0, [sp, #8]
 8003236:	9006      	str	r0, [sp, #24]
 8003238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <siprintf+0x38>)
 800323e:	9107      	str	r1, [sp, #28]
 8003240:	9104      	str	r1, [sp, #16]
 8003242:	4909      	ldr	r1, [pc, #36]	; (8003268 <siprintf+0x3c>)
 8003244:	f853 2b04 	ldr.w	r2, [r3], #4
 8003248:	9105      	str	r1, [sp, #20]
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	a902      	add	r1, sp, #8
 8003250:	f000 f868 	bl	8003324 <_svfiprintf_r>
 8003254:	9b02      	ldr	r3, [sp, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	b01c      	add	sp, #112	; 0x70
 800325c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003260:	b003      	add	sp, #12
 8003262:	4770      	bx	lr
 8003264:	2000000c 	.word	0x2000000c
 8003268:	ffff0208 	.word	0xffff0208

0800326c <__ssputs_r>:
 800326c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003270:	688e      	ldr	r6, [r1, #8]
 8003272:	429e      	cmp	r6, r3
 8003274:	4682      	mov	sl, r0
 8003276:	460c      	mov	r4, r1
 8003278:	4690      	mov	r8, r2
 800327a:	461f      	mov	r7, r3
 800327c:	d838      	bhi.n	80032f0 <__ssputs_r+0x84>
 800327e:	898a      	ldrh	r2, [r1, #12]
 8003280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003284:	d032      	beq.n	80032ec <__ssputs_r+0x80>
 8003286:	6825      	ldr	r5, [r4, #0]
 8003288:	6909      	ldr	r1, [r1, #16]
 800328a:	eba5 0901 	sub.w	r9, r5, r1
 800328e:	6965      	ldr	r5, [r4, #20]
 8003290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003298:	3301      	adds	r3, #1
 800329a:	444b      	add	r3, r9
 800329c:	106d      	asrs	r5, r5, #1
 800329e:	429d      	cmp	r5, r3
 80032a0:	bf38      	it	cc
 80032a2:	461d      	movcc	r5, r3
 80032a4:	0553      	lsls	r3, r2, #21
 80032a6:	d531      	bpl.n	800330c <__ssputs_r+0xa0>
 80032a8:	4629      	mov	r1, r5
 80032aa:	f000 fb63 	bl	8003974 <_malloc_r>
 80032ae:	4606      	mov	r6, r0
 80032b0:	b950      	cbnz	r0, 80032c8 <__ssputs_r+0x5c>
 80032b2:	230c      	movs	r3, #12
 80032b4:	f8ca 3000 	str.w	r3, [sl]
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032be:	81a3      	strh	r3, [r4, #12]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c8:	6921      	ldr	r1, [r4, #16]
 80032ca:	464a      	mov	r2, r9
 80032cc:	f000 fabe 	bl	800384c <memcpy>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	6126      	str	r6, [r4, #16]
 80032de:	6165      	str	r5, [r4, #20]
 80032e0:	444e      	add	r6, r9
 80032e2:	eba5 0509 	sub.w	r5, r5, r9
 80032e6:	6026      	str	r6, [r4, #0]
 80032e8:	60a5      	str	r5, [r4, #8]
 80032ea:	463e      	mov	r6, r7
 80032ec:	42be      	cmp	r6, r7
 80032ee:	d900      	bls.n	80032f2 <__ssputs_r+0x86>
 80032f0:	463e      	mov	r6, r7
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	4632      	mov	r2, r6
 80032f6:	4641      	mov	r1, r8
 80032f8:	f000 fab6 	bl	8003868 <memmove>
 80032fc:	68a3      	ldr	r3, [r4, #8]
 80032fe:	1b9b      	subs	r3, r3, r6
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	4433      	add	r3, r6
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	2000      	movs	r0, #0
 800330a:	e7db      	b.n	80032c4 <__ssputs_r+0x58>
 800330c:	462a      	mov	r2, r5
 800330e:	f000 fba5 	bl	8003a5c <_realloc_r>
 8003312:	4606      	mov	r6, r0
 8003314:	2800      	cmp	r0, #0
 8003316:	d1e1      	bne.n	80032dc <__ssputs_r+0x70>
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	4650      	mov	r0, sl
 800331c:	f000 fabe 	bl	800389c <_free_r>
 8003320:	e7c7      	b.n	80032b2 <__ssputs_r+0x46>
	...

08003324 <_svfiprintf_r>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	4698      	mov	r8, r3
 800332a:	898b      	ldrh	r3, [r1, #12]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	b09d      	sub	sp, #116	; 0x74
 8003330:	4607      	mov	r7, r0
 8003332:	460d      	mov	r5, r1
 8003334:	4614      	mov	r4, r2
 8003336:	d50e      	bpl.n	8003356 <_svfiprintf_r+0x32>
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	b963      	cbnz	r3, 8003356 <_svfiprintf_r+0x32>
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	f000 fb19 	bl	8003974 <_malloc_r>
 8003342:	6028      	str	r0, [r5, #0]
 8003344:	6128      	str	r0, [r5, #16]
 8003346:	b920      	cbnz	r0, 8003352 <_svfiprintf_r+0x2e>
 8003348:	230c      	movs	r3, #12
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	e0d1      	b.n	80034f6 <_svfiprintf_r+0x1d2>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	616b      	str	r3, [r5, #20]
 8003356:	2300      	movs	r3, #0
 8003358:	9309      	str	r3, [sp, #36]	; 0x24
 800335a:	2320      	movs	r3, #32
 800335c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003360:	f8cd 800c 	str.w	r8, [sp, #12]
 8003364:	2330      	movs	r3, #48	; 0x30
 8003366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003510 <_svfiprintf_r+0x1ec>
 800336a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336e:	f04f 0901 	mov.w	r9, #1
 8003372:	4623      	mov	r3, r4
 8003374:	469a      	mov	sl, r3
 8003376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800337a:	b10a      	cbz	r2, 8003380 <_svfiprintf_r+0x5c>
 800337c:	2a25      	cmp	r2, #37	; 0x25
 800337e:	d1f9      	bne.n	8003374 <_svfiprintf_r+0x50>
 8003380:	ebba 0b04 	subs.w	fp, sl, r4
 8003384:	d00b      	beq.n	800339e <_svfiprintf_r+0x7a>
 8003386:	465b      	mov	r3, fp
 8003388:	4622      	mov	r2, r4
 800338a:	4629      	mov	r1, r5
 800338c:	4638      	mov	r0, r7
 800338e:	f7ff ff6d 	bl	800326c <__ssputs_r>
 8003392:	3001      	adds	r0, #1
 8003394:	f000 80aa 	beq.w	80034ec <_svfiprintf_r+0x1c8>
 8003398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800339a:	445a      	add	r2, fp
 800339c:	9209      	str	r2, [sp, #36]	; 0x24
 800339e:	f89a 3000 	ldrb.w	r3, [sl]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a2 	beq.w	80034ec <_svfiprintf_r+0x1c8>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295
 80033ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b2:	f10a 0a01 	add.w	sl, sl, #1
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	9307      	str	r3, [sp, #28]
 80033ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033be:	931a      	str	r3, [sp, #104]	; 0x68
 80033c0:	4654      	mov	r4, sl
 80033c2:	2205      	movs	r2, #5
 80033c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c8:	4851      	ldr	r0, [pc, #324]	; (8003510 <_svfiprintf_r+0x1ec>)
 80033ca:	f7fc ff01 	bl	80001d0 <memchr>
 80033ce:	9a04      	ldr	r2, [sp, #16]
 80033d0:	b9d8      	cbnz	r0, 800340a <_svfiprintf_r+0xe6>
 80033d2:	06d0      	lsls	r0, r2, #27
 80033d4:	bf44      	itt	mi
 80033d6:	2320      	movmi	r3, #32
 80033d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033dc:	0711      	lsls	r1, r2, #28
 80033de:	bf44      	itt	mi
 80033e0:	232b      	movmi	r3, #43	; 0x2b
 80033e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b2a      	cmp	r3, #42	; 0x2a
 80033ec:	d015      	beq.n	800341a <_svfiprintf_r+0xf6>
 80033ee:	9a07      	ldr	r2, [sp, #28]
 80033f0:	4654      	mov	r4, sl
 80033f2:	2000      	movs	r0, #0
 80033f4:	f04f 0c0a 	mov.w	ip, #10
 80033f8:	4621      	mov	r1, r4
 80033fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033fe:	3b30      	subs	r3, #48	; 0x30
 8003400:	2b09      	cmp	r3, #9
 8003402:	d94e      	bls.n	80034a2 <_svfiprintf_r+0x17e>
 8003404:	b1b0      	cbz	r0, 8003434 <_svfiprintf_r+0x110>
 8003406:	9207      	str	r2, [sp, #28]
 8003408:	e014      	b.n	8003434 <_svfiprintf_r+0x110>
 800340a:	eba0 0308 	sub.w	r3, r0, r8
 800340e:	fa09 f303 	lsl.w	r3, r9, r3
 8003412:	4313      	orrs	r3, r2
 8003414:	9304      	str	r3, [sp, #16]
 8003416:	46a2      	mov	sl, r4
 8003418:	e7d2      	b.n	80033c0 <_svfiprintf_r+0x9c>
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	1d19      	adds	r1, r3, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	9103      	str	r1, [sp, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	bfbb      	ittet	lt
 8003426:	425b      	neglt	r3, r3
 8003428:	f042 0202 	orrlt.w	r2, r2, #2
 800342c:	9307      	strge	r3, [sp, #28]
 800342e:	9307      	strlt	r3, [sp, #28]
 8003430:	bfb8      	it	lt
 8003432:	9204      	strlt	r2, [sp, #16]
 8003434:	7823      	ldrb	r3, [r4, #0]
 8003436:	2b2e      	cmp	r3, #46	; 0x2e
 8003438:	d10c      	bne.n	8003454 <_svfiprintf_r+0x130>
 800343a:	7863      	ldrb	r3, [r4, #1]
 800343c:	2b2a      	cmp	r3, #42	; 0x2a
 800343e:	d135      	bne.n	80034ac <_svfiprintf_r+0x188>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9203      	str	r2, [sp, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfb8      	it	lt
 800344c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003450:	3402      	adds	r4, #2
 8003452:	9305      	str	r3, [sp, #20]
 8003454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003520 <_svfiprintf_r+0x1fc>
 8003458:	7821      	ldrb	r1, [r4, #0]
 800345a:	2203      	movs	r2, #3
 800345c:	4650      	mov	r0, sl
 800345e:	f7fc feb7 	bl	80001d0 <memchr>
 8003462:	b140      	cbz	r0, 8003476 <_svfiprintf_r+0x152>
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	eba0 000a 	sub.w	r0, r0, sl
 800346a:	fa03 f000 	lsl.w	r0, r3, r0
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	4303      	orrs	r3, r0
 8003472:	3401      	adds	r4, #1
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347a:	4826      	ldr	r0, [pc, #152]	; (8003514 <_svfiprintf_r+0x1f0>)
 800347c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003480:	2206      	movs	r2, #6
 8003482:	f7fc fea5 	bl	80001d0 <memchr>
 8003486:	2800      	cmp	r0, #0
 8003488:	d038      	beq.n	80034fc <_svfiprintf_r+0x1d8>
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <_svfiprintf_r+0x1f4>)
 800348c:	bb1b      	cbnz	r3, 80034d6 <_svfiprintf_r+0x1b2>
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	3307      	adds	r3, #7
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	3308      	adds	r3, #8
 8003498:	9303      	str	r3, [sp, #12]
 800349a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349c:	4433      	add	r3, r6
 800349e:	9309      	str	r3, [sp, #36]	; 0x24
 80034a0:	e767      	b.n	8003372 <_svfiprintf_r+0x4e>
 80034a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034a6:	460c      	mov	r4, r1
 80034a8:	2001      	movs	r0, #1
 80034aa:	e7a5      	b.n	80033f8 <_svfiprintf_r+0xd4>
 80034ac:	2300      	movs	r3, #0
 80034ae:	3401      	adds	r4, #1
 80034b0:	9305      	str	r3, [sp, #20]
 80034b2:	4619      	mov	r1, r3
 80034b4:	f04f 0c0a 	mov.w	ip, #10
 80034b8:	4620      	mov	r0, r4
 80034ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034be:	3a30      	subs	r2, #48	; 0x30
 80034c0:	2a09      	cmp	r2, #9
 80034c2:	d903      	bls.n	80034cc <_svfiprintf_r+0x1a8>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0c5      	beq.n	8003454 <_svfiprintf_r+0x130>
 80034c8:	9105      	str	r1, [sp, #20]
 80034ca:	e7c3      	b.n	8003454 <_svfiprintf_r+0x130>
 80034cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80034d0:	4604      	mov	r4, r0
 80034d2:	2301      	movs	r3, #1
 80034d4:	e7f0      	b.n	80034b8 <_svfiprintf_r+0x194>
 80034d6:	ab03      	add	r3, sp, #12
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	462a      	mov	r2, r5
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <_svfiprintf_r+0x1f8>)
 80034de:	a904      	add	r1, sp, #16
 80034e0:	4638      	mov	r0, r7
 80034e2:	f3af 8000 	nop.w
 80034e6:	1c42      	adds	r2, r0, #1
 80034e8:	4606      	mov	r6, r0
 80034ea:	d1d6      	bne.n	800349a <_svfiprintf_r+0x176>
 80034ec:	89ab      	ldrh	r3, [r5, #12]
 80034ee:	065b      	lsls	r3, r3, #25
 80034f0:	f53f af2c 	bmi.w	800334c <_svfiprintf_r+0x28>
 80034f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f6:	b01d      	add	sp, #116	; 0x74
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	ab03      	add	r3, sp, #12
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	462a      	mov	r2, r5
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <_svfiprintf_r+0x1f8>)
 8003504:	a904      	add	r1, sp, #16
 8003506:	4638      	mov	r0, r7
 8003508:	f000 f87a 	bl	8003600 <_printf_i>
 800350c:	e7eb      	b.n	80034e6 <_svfiprintf_r+0x1c2>
 800350e:	bf00      	nop
 8003510:	08003b84 	.word	0x08003b84
 8003514:	08003b8e 	.word	0x08003b8e
 8003518:	00000000 	.word	0x00000000
 800351c:	0800326d 	.word	0x0800326d
 8003520:	08003b8a 	.word	0x08003b8a

08003524 <_printf_common>:
 8003524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003528:	4616      	mov	r6, r2
 800352a:	4699      	mov	r9, r3
 800352c:	688a      	ldr	r2, [r1, #8]
 800352e:	690b      	ldr	r3, [r1, #16]
 8003530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003534:	4293      	cmp	r3, r2
 8003536:	bfb8      	it	lt
 8003538:	4613      	movlt	r3, r2
 800353a:	6033      	str	r3, [r6, #0]
 800353c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003540:	4607      	mov	r7, r0
 8003542:	460c      	mov	r4, r1
 8003544:	b10a      	cbz	r2, 800354a <_printf_common+0x26>
 8003546:	3301      	adds	r3, #1
 8003548:	6033      	str	r3, [r6, #0]
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0699      	lsls	r1, r3, #26
 800354e:	bf42      	ittt	mi
 8003550:	6833      	ldrmi	r3, [r6, #0]
 8003552:	3302      	addmi	r3, #2
 8003554:	6033      	strmi	r3, [r6, #0]
 8003556:	6825      	ldr	r5, [r4, #0]
 8003558:	f015 0506 	ands.w	r5, r5, #6
 800355c:	d106      	bne.n	800356c <_printf_common+0x48>
 800355e:	f104 0a19 	add.w	sl, r4, #25
 8003562:	68e3      	ldr	r3, [r4, #12]
 8003564:	6832      	ldr	r2, [r6, #0]
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	42ab      	cmp	r3, r5
 800356a:	dc26      	bgt.n	80035ba <_printf_common+0x96>
 800356c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003570:	1e13      	subs	r3, r2, #0
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	bf18      	it	ne
 8003576:	2301      	movne	r3, #1
 8003578:	0692      	lsls	r2, r2, #26
 800357a:	d42b      	bmi.n	80035d4 <_printf_common+0xb0>
 800357c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003580:	4649      	mov	r1, r9
 8003582:	4638      	mov	r0, r7
 8003584:	47c0      	blx	r8
 8003586:	3001      	adds	r0, #1
 8003588:	d01e      	beq.n	80035c8 <_printf_common+0xa4>
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	68e5      	ldr	r5, [r4, #12]
 800358e:	6832      	ldr	r2, [r6, #0]
 8003590:	f003 0306 	and.w	r3, r3, #6
 8003594:	2b04      	cmp	r3, #4
 8003596:	bf08      	it	eq
 8003598:	1aad      	subeq	r5, r5, r2
 800359a:	68a3      	ldr	r3, [r4, #8]
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	bf0c      	ite	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	2500      	movne	r5, #0
 80035a6:	4293      	cmp	r3, r2
 80035a8:	bfc4      	itt	gt
 80035aa:	1a9b      	subgt	r3, r3, r2
 80035ac:	18ed      	addgt	r5, r5, r3
 80035ae:	2600      	movs	r6, #0
 80035b0:	341a      	adds	r4, #26
 80035b2:	42b5      	cmp	r5, r6
 80035b4:	d11a      	bne.n	80035ec <_printf_common+0xc8>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e008      	b.n	80035cc <_printf_common+0xa8>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4652      	mov	r2, sl
 80035be:	4649      	mov	r1, r9
 80035c0:	4638      	mov	r0, r7
 80035c2:	47c0      	blx	r8
 80035c4:	3001      	adds	r0, #1
 80035c6:	d103      	bne.n	80035d0 <_printf_common+0xac>
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	3501      	adds	r5, #1
 80035d2:	e7c6      	b.n	8003562 <_printf_common+0x3e>
 80035d4:	18e1      	adds	r1, r4, r3
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	2030      	movs	r0, #48	; 0x30
 80035da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035de:	4422      	add	r2, r4
 80035e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e8:	3302      	adds	r3, #2
 80035ea:	e7c7      	b.n	800357c <_printf_common+0x58>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4622      	mov	r2, r4
 80035f0:	4649      	mov	r1, r9
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d0e6      	beq.n	80035c8 <_printf_common+0xa4>
 80035fa:	3601      	adds	r6, #1
 80035fc:	e7d9      	b.n	80035b2 <_printf_common+0x8e>
	...

08003600 <_printf_i>:
 8003600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	7e0f      	ldrb	r7, [r1, #24]
 8003606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003608:	2f78      	cmp	r7, #120	; 0x78
 800360a:	4691      	mov	r9, r2
 800360c:	4680      	mov	r8, r0
 800360e:	460c      	mov	r4, r1
 8003610:	469a      	mov	sl, r3
 8003612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003616:	d807      	bhi.n	8003628 <_printf_i+0x28>
 8003618:	2f62      	cmp	r7, #98	; 0x62
 800361a:	d80a      	bhi.n	8003632 <_printf_i+0x32>
 800361c:	2f00      	cmp	r7, #0
 800361e:	f000 80d8 	beq.w	80037d2 <_printf_i+0x1d2>
 8003622:	2f58      	cmp	r7, #88	; 0x58
 8003624:	f000 80a3 	beq.w	800376e <_printf_i+0x16e>
 8003628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800362c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003630:	e03a      	b.n	80036a8 <_printf_i+0xa8>
 8003632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003636:	2b15      	cmp	r3, #21
 8003638:	d8f6      	bhi.n	8003628 <_printf_i+0x28>
 800363a:	a101      	add	r1, pc, #4	; (adr r1, 8003640 <_printf_i+0x40>)
 800363c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003640:	08003699 	.word	0x08003699
 8003644:	080036ad 	.word	0x080036ad
 8003648:	08003629 	.word	0x08003629
 800364c:	08003629 	.word	0x08003629
 8003650:	08003629 	.word	0x08003629
 8003654:	08003629 	.word	0x08003629
 8003658:	080036ad 	.word	0x080036ad
 800365c:	08003629 	.word	0x08003629
 8003660:	08003629 	.word	0x08003629
 8003664:	08003629 	.word	0x08003629
 8003668:	08003629 	.word	0x08003629
 800366c:	080037b9 	.word	0x080037b9
 8003670:	080036dd 	.word	0x080036dd
 8003674:	0800379b 	.word	0x0800379b
 8003678:	08003629 	.word	0x08003629
 800367c:	08003629 	.word	0x08003629
 8003680:	080037db 	.word	0x080037db
 8003684:	08003629 	.word	0x08003629
 8003688:	080036dd 	.word	0x080036dd
 800368c:	08003629 	.word	0x08003629
 8003690:	08003629 	.word	0x08003629
 8003694:	080037a3 	.word	0x080037a3
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0a3      	b.n	80037f4 <_printf_i+0x1f4>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	6829      	ldr	r1, [r5, #0]
 80036b0:	0606      	lsls	r6, r0, #24
 80036b2:	f101 0304 	add.w	r3, r1, #4
 80036b6:	d50a      	bpl.n	80036ce <_printf_i+0xce>
 80036b8:	680e      	ldr	r6, [r1, #0]
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	2e00      	cmp	r6, #0
 80036be:	da03      	bge.n	80036c8 <_printf_i+0xc8>
 80036c0:	232d      	movs	r3, #45	; 0x2d
 80036c2:	4276      	negs	r6, r6
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	485e      	ldr	r0, [pc, #376]	; (8003844 <_printf_i+0x244>)
 80036ca:	230a      	movs	r3, #10
 80036cc:	e019      	b.n	8003702 <_printf_i+0x102>
 80036ce:	680e      	ldr	r6, [r1, #0]
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036d6:	bf18      	it	ne
 80036d8:	b236      	sxthne	r6, r6
 80036da:	e7ef      	b.n	80036bc <_printf_i+0xbc>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	6029      	str	r1, [r5, #0]
 80036e4:	0601      	lsls	r1, r0, #24
 80036e6:	d501      	bpl.n	80036ec <_printf_i+0xec>
 80036e8:	681e      	ldr	r6, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <_printf_i+0xf2>
 80036ec:	0646      	lsls	r6, r0, #25
 80036ee:	d5fb      	bpl.n	80036e8 <_printf_i+0xe8>
 80036f0:	881e      	ldrh	r6, [r3, #0]
 80036f2:	4854      	ldr	r0, [pc, #336]	; (8003844 <_printf_i+0x244>)
 80036f4:	2f6f      	cmp	r7, #111	; 0x6f
 80036f6:	bf0c      	ite	eq
 80036f8:	2308      	moveq	r3, #8
 80036fa:	230a      	movne	r3, #10
 80036fc:	2100      	movs	r1, #0
 80036fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003702:	6865      	ldr	r5, [r4, #4]
 8003704:	60a5      	str	r5, [r4, #8]
 8003706:	2d00      	cmp	r5, #0
 8003708:	bfa2      	ittt	ge
 800370a:	6821      	ldrge	r1, [r4, #0]
 800370c:	f021 0104 	bicge.w	r1, r1, #4
 8003710:	6021      	strge	r1, [r4, #0]
 8003712:	b90e      	cbnz	r6, 8003718 <_printf_i+0x118>
 8003714:	2d00      	cmp	r5, #0
 8003716:	d04d      	beq.n	80037b4 <_printf_i+0x1b4>
 8003718:	4615      	mov	r5, r2
 800371a:	fbb6 f1f3 	udiv	r1, r6, r3
 800371e:	fb03 6711 	mls	r7, r3, r1, r6
 8003722:	5dc7      	ldrb	r7, [r0, r7]
 8003724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003728:	4637      	mov	r7, r6
 800372a:	42bb      	cmp	r3, r7
 800372c:	460e      	mov	r6, r1
 800372e:	d9f4      	bls.n	800371a <_printf_i+0x11a>
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10b      	bne.n	800374c <_printf_i+0x14c>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	07de      	lsls	r6, r3, #31
 8003738:	d508      	bpl.n	800374c <_printf_i+0x14c>
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	6861      	ldr	r1, [r4, #4]
 800373e:	4299      	cmp	r1, r3
 8003740:	bfde      	ittt	le
 8003742:	2330      	movle	r3, #48	; 0x30
 8003744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800374c:	1b52      	subs	r2, r2, r5
 800374e:	6122      	str	r2, [r4, #16]
 8003750:	f8cd a000 	str.w	sl, [sp]
 8003754:	464b      	mov	r3, r9
 8003756:	aa03      	add	r2, sp, #12
 8003758:	4621      	mov	r1, r4
 800375a:	4640      	mov	r0, r8
 800375c:	f7ff fee2 	bl	8003524 <_printf_common>
 8003760:	3001      	adds	r0, #1
 8003762:	d14c      	bne.n	80037fe <_printf_i+0x1fe>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b004      	add	sp, #16
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376e:	4835      	ldr	r0, [pc, #212]	; (8003844 <_printf_i+0x244>)
 8003770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003774:	6829      	ldr	r1, [r5, #0]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	f851 6b04 	ldr.w	r6, [r1], #4
 800377c:	6029      	str	r1, [r5, #0]
 800377e:	061d      	lsls	r5, r3, #24
 8003780:	d514      	bpl.n	80037ac <_printf_i+0x1ac>
 8003782:	07df      	lsls	r7, r3, #31
 8003784:	bf44      	itt	mi
 8003786:	f043 0320 	orrmi.w	r3, r3, #32
 800378a:	6023      	strmi	r3, [r4, #0]
 800378c:	b91e      	cbnz	r6, 8003796 <_printf_i+0x196>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f023 0320 	bic.w	r3, r3, #32
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	2310      	movs	r3, #16
 8003798:	e7b0      	b.n	80036fc <_printf_i+0xfc>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	2378      	movs	r3, #120	; 0x78
 80037a4:	4828      	ldr	r0, [pc, #160]	; (8003848 <_printf_i+0x248>)
 80037a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037aa:	e7e3      	b.n	8003774 <_printf_i+0x174>
 80037ac:	0659      	lsls	r1, r3, #25
 80037ae:	bf48      	it	mi
 80037b0:	b2b6      	uxthmi	r6, r6
 80037b2:	e7e6      	b.n	8003782 <_printf_i+0x182>
 80037b4:	4615      	mov	r5, r2
 80037b6:	e7bb      	b.n	8003730 <_printf_i+0x130>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	6826      	ldr	r6, [r4, #0]
 80037bc:	6961      	ldr	r1, [r4, #20]
 80037be:	1d18      	adds	r0, r3, #4
 80037c0:	6028      	str	r0, [r5, #0]
 80037c2:	0635      	lsls	r5, r6, #24
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	d501      	bpl.n	80037cc <_printf_i+0x1cc>
 80037c8:	6019      	str	r1, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <_printf_i+0x1d2>
 80037cc:	0670      	lsls	r0, r6, #25
 80037ce:	d5fb      	bpl.n	80037c8 <_printf_i+0x1c8>
 80037d0:	8019      	strh	r1, [r3, #0]
 80037d2:	2300      	movs	r3, #0
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	4615      	mov	r5, r2
 80037d8:	e7ba      	b.n	8003750 <_printf_i+0x150>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	2100      	movs	r1, #0
 80037e6:	4628      	mov	r0, r5
 80037e8:	f7fc fcf2 	bl	80001d0 <memchr>
 80037ec:	b108      	cbz	r0, 80037f2 <_printf_i+0x1f2>
 80037ee:	1b40      	subs	r0, r0, r5
 80037f0:	6060      	str	r0, [r4, #4]
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2300      	movs	r3, #0
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	e7a8      	b.n	8003750 <_printf_i+0x150>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	462a      	mov	r2, r5
 8003802:	4649      	mov	r1, r9
 8003804:	4640      	mov	r0, r8
 8003806:	47d0      	blx	sl
 8003808:	3001      	adds	r0, #1
 800380a:	d0ab      	beq.n	8003764 <_printf_i+0x164>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	079b      	lsls	r3, r3, #30
 8003810:	d413      	bmi.n	800383a <_printf_i+0x23a>
 8003812:	68e0      	ldr	r0, [r4, #12]
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	4298      	cmp	r0, r3
 8003818:	bfb8      	it	lt
 800381a:	4618      	movlt	r0, r3
 800381c:	e7a4      	b.n	8003768 <_printf_i+0x168>
 800381e:	2301      	movs	r3, #1
 8003820:	4632      	mov	r2, r6
 8003822:	4649      	mov	r1, r9
 8003824:	4640      	mov	r0, r8
 8003826:	47d0      	blx	sl
 8003828:	3001      	adds	r0, #1
 800382a:	d09b      	beq.n	8003764 <_printf_i+0x164>
 800382c:	3501      	adds	r5, #1
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	9903      	ldr	r1, [sp, #12]
 8003832:	1a5b      	subs	r3, r3, r1
 8003834:	42ab      	cmp	r3, r5
 8003836:	dcf2      	bgt.n	800381e <_printf_i+0x21e>
 8003838:	e7eb      	b.n	8003812 <_printf_i+0x212>
 800383a:	2500      	movs	r5, #0
 800383c:	f104 0619 	add.w	r6, r4, #25
 8003840:	e7f5      	b.n	800382e <_printf_i+0x22e>
 8003842:	bf00      	nop
 8003844:	08003b95 	.word	0x08003b95
 8003848:	08003ba6 	.word	0x08003ba6

0800384c <memcpy>:
 800384c:	440a      	add	r2, r1
 800384e:	4291      	cmp	r1, r2
 8003850:	f100 33ff 	add.w	r3, r0, #4294967295
 8003854:	d100      	bne.n	8003858 <memcpy+0xc>
 8003856:	4770      	bx	lr
 8003858:	b510      	push	{r4, lr}
 800385a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800385e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003862:	4291      	cmp	r1, r2
 8003864:	d1f9      	bne.n	800385a <memcpy+0xe>
 8003866:	bd10      	pop	{r4, pc}

08003868 <memmove>:
 8003868:	4288      	cmp	r0, r1
 800386a:	b510      	push	{r4, lr}
 800386c:	eb01 0402 	add.w	r4, r1, r2
 8003870:	d902      	bls.n	8003878 <memmove+0x10>
 8003872:	4284      	cmp	r4, r0
 8003874:	4623      	mov	r3, r4
 8003876:	d807      	bhi.n	8003888 <memmove+0x20>
 8003878:	1e43      	subs	r3, r0, #1
 800387a:	42a1      	cmp	r1, r4
 800387c:	d008      	beq.n	8003890 <memmove+0x28>
 800387e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003886:	e7f8      	b.n	800387a <memmove+0x12>
 8003888:	4402      	add	r2, r0
 800388a:	4601      	mov	r1, r0
 800388c:	428a      	cmp	r2, r1
 800388e:	d100      	bne.n	8003892 <memmove+0x2a>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800389a:	e7f7      	b.n	800388c <memmove+0x24>

0800389c <_free_r>:
 800389c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800389e:	2900      	cmp	r1, #0
 80038a0:	d044      	beq.n	800392c <_free_r+0x90>
 80038a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a6:	9001      	str	r0, [sp, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f1a1 0404 	sub.w	r4, r1, #4
 80038ae:	bfb8      	it	lt
 80038b0:	18e4      	addlt	r4, r4, r3
 80038b2:	f000 f913 	bl	8003adc <__malloc_lock>
 80038b6:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <_free_r+0x94>)
 80038b8:	9801      	ldr	r0, [sp, #4]
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	b933      	cbnz	r3, 80038cc <_free_r+0x30>
 80038be:	6063      	str	r3, [r4, #4]
 80038c0:	6014      	str	r4, [r2, #0]
 80038c2:	b003      	add	sp, #12
 80038c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038c8:	f000 b90e 	b.w	8003ae8 <__malloc_unlock>
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	d908      	bls.n	80038e2 <_free_r+0x46>
 80038d0:	6825      	ldr	r5, [r4, #0]
 80038d2:	1961      	adds	r1, r4, r5
 80038d4:	428b      	cmp	r3, r1
 80038d6:	bf01      	itttt	eq
 80038d8:	6819      	ldreq	r1, [r3, #0]
 80038da:	685b      	ldreq	r3, [r3, #4]
 80038dc:	1949      	addeq	r1, r1, r5
 80038de:	6021      	streq	r1, [r4, #0]
 80038e0:	e7ed      	b.n	80038be <_free_r+0x22>
 80038e2:	461a      	mov	r2, r3
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b10b      	cbz	r3, 80038ec <_free_r+0x50>
 80038e8:	42a3      	cmp	r3, r4
 80038ea:	d9fa      	bls.n	80038e2 <_free_r+0x46>
 80038ec:	6811      	ldr	r1, [r2, #0]
 80038ee:	1855      	adds	r5, r2, r1
 80038f0:	42a5      	cmp	r5, r4
 80038f2:	d10b      	bne.n	800390c <_free_r+0x70>
 80038f4:	6824      	ldr	r4, [r4, #0]
 80038f6:	4421      	add	r1, r4
 80038f8:	1854      	adds	r4, r2, r1
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	d1e0      	bne.n	80038c2 <_free_r+0x26>
 8003900:	681c      	ldr	r4, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	6053      	str	r3, [r2, #4]
 8003906:	4421      	add	r1, r4
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	e7da      	b.n	80038c2 <_free_r+0x26>
 800390c:	d902      	bls.n	8003914 <_free_r+0x78>
 800390e:	230c      	movs	r3, #12
 8003910:	6003      	str	r3, [r0, #0]
 8003912:	e7d6      	b.n	80038c2 <_free_r+0x26>
 8003914:	6825      	ldr	r5, [r4, #0]
 8003916:	1961      	adds	r1, r4, r5
 8003918:	428b      	cmp	r3, r1
 800391a:	bf04      	itt	eq
 800391c:	6819      	ldreq	r1, [r3, #0]
 800391e:	685b      	ldreq	r3, [r3, #4]
 8003920:	6063      	str	r3, [r4, #4]
 8003922:	bf04      	itt	eq
 8003924:	1949      	addeq	r1, r1, r5
 8003926:	6021      	streq	r1, [r4, #0]
 8003928:	6054      	str	r4, [r2, #4]
 800392a:	e7ca      	b.n	80038c2 <_free_r+0x26>
 800392c:	b003      	add	sp, #12
 800392e:	bd30      	pop	{r4, r5, pc}
 8003930:	20000180 	.word	0x20000180

08003934 <sbrk_aligned>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4e0e      	ldr	r6, [pc, #56]	; (8003970 <sbrk_aligned+0x3c>)
 8003938:	460c      	mov	r4, r1
 800393a:	6831      	ldr	r1, [r6, #0]
 800393c:	4605      	mov	r5, r0
 800393e:	b911      	cbnz	r1, 8003946 <sbrk_aligned+0x12>
 8003940:	f000 f8bc 	bl	8003abc <_sbrk_r>
 8003944:	6030      	str	r0, [r6, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f8b7 	bl	8003abc <_sbrk_r>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	d00a      	beq.n	8003968 <sbrk_aligned+0x34>
 8003952:	1cc4      	adds	r4, r0, #3
 8003954:	f024 0403 	bic.w	r4, r4, #3
 8003958:	42a0      	cmp	r0, r4
 800395a:	d007      	beq.n	800396c <sbrk_aligned+0x38>
 800395c:	1a21      	subs	r1, r4, r0
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f8ac 	bl	8003abc <_sbrk_r>
 8003964:	3001      	adds	r0, #1
 8003966:	d101      	bne.n	800396c <sbrk_aligned+0x38>
 8003968:	f04f 34ff 	mov.w	r4, #4294967295
 800396c:	4620      	mov	r0, r4
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	20000184 	.word	0x20000184

08003974 <_malloc_r>:
 8003974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003978:	1ccd      	adds	r5, r1, #3
 800397a:	f025 0503 	bic.w	r5, r5, #3
 800397e:	3508      	adds	r5, #8
 8003980:	2d0c      	cmp	r5, #12
 8003982:	bf38      	it	cc
 8003984:	250c      	movcc	r5, #12
 8003986:	2d00      	cmp	r5, #0
 8003988:	4607      	mov	r7, r0
 800398a:	db01      	blt.n	8003990 <_malloc_r+0x1c>
 800398c:	42a9      	cmp	r1, r5
 800398e:	d905      	bls.n	800399c <_malloc_r+0x28>
 8003990:	230c      	movs	r3, #12
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	2600      	movs	r6, #0
 8003996:	4630      	mov	r0, r6
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800399c:	4e2e      	ldr	r6, [pc, #184]	; (8003a58 <_malloc_r+0xe4>)
 800399e:	f000 f89d 	bl	8003adc <__malloc_lock>
 80039a2:	6833      	ldr	r3, [r6, #0]
 80039a4:	461c      	mov	r4, r3
 80039a6:	bb34      	cbnz	r4, 80039f6 <_malloc_r+0x82>
 80039a8:	4629      	mov	r1, r5
 80039aa:	4638      	mov	r0, r7
 80039ac:	f7ff ffc2 	bl	8003934 <sbrk_aligned>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	4604      	mov	r4, r0
 80039b4:	d14d      	bne.n	8003a52 <_malloc_r+0xde>
 80039b6:	6834      	ldr	r4, [r6, #0]
 80039b8:	4626      	mov	r6, r4
 80039ba:	2e00      	cmp	r6, #0
 80039bc:	d140      	bne.n	8003a40 <_malloc_r+0xcc>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	4631      	mov	r1, r6
 80039c2:	4638      	mov	r0, r7
 80039c4:	eb04 0803 	add.w	r8, r4, r3
 80039c8:	f000 f878 	bl	8003abc <_sbrk_r>
 80039cc:	4580      	cmp	r8, r0
 80039ce:	d13a      	bne.n	8003a46 <_malloc_r+0xd2>
 80039d0:	6821      	ldr	r1, [r4, #0]
 80039d2:	3503      	adds	r5, #3
 80039d4:	1a6d      	subs	r5, r5, r1
 80039d6:	f025 0503 	bic.w	r5, r5, #3
 80039da:	3508      	adds	r5, #8
 80039dc:	2d0c      	cmp	r5, #12
 80039de:	bf38      	it	cc
 80039e0:	250c      	movcc	r5, #12
 80039e2:	4629      	mov	r1, r5
 80039e4:	4638      	mov	r0, r7
 80039e6:	f7ff ffa5 	bl	8003934 <sbrk_aligned>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d02b      	beq.n	8003a46 <_malloc_r+0xd2>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	442b      	add	r3, r5
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	e00e      	b.n	8003a14 <_malloc_r+0xa0>
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	1b52      	subs	r2, r2, r5
 80039fa:	d41e      	bmi.n	8003a3a <_malloc_r+0xc6>
 80039fc:	2a0b      	cmp	r2, #11
 80039fe:	d916      	bls.n	8003a2e <_malloc_r+0xba>
 8003a00:	1961      	adds	r1, r4, r5
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	6025      	str	r5, [r4, #0]
 8003a06:	bf18      	it	ne
 8003a08:	6059      	strne	r1, [r3, #4]
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	bf08      	it	eq
 8003a0e:	6031      	streq	r1, [r6, #0]
 8003a10:	5162      	str	r2, [r4, r5]
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	4638      	mov	r0, r7
 8003a16:	f104 060b 	add.w	r6, r4, #11
 8003a1a:	f000 f865 	bl	8003ae8 <__malloc_unlock>
 8003a1e:	f026 0607 	bic.w	r6, r6, #7
 8003a22:	1d23      	adds	r3, r4, #4
 8003a24:	1af2      	subs	r2, r6, r3
 8003a26:	d0b6      	beq.n	8003996 <_malloc_r+0x22>
 8003a28:	1b9b      	subs	r3, r3, r6
 8003a2a:	50a3      	str	r3, [r4, r2]
 8003a2c:	e7b3      	b.n	8003996 <_malloc_r+0x22>
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	bf0c      	ite	eq
 8003a34:	6032      	streq	r2, [r6, #0]
 8003a36:	605a      	strne	r2, [r3, #4]
 8003a38:	e7ec      	b.n	8003a14 <_malloc_r+0xa0>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7b2      	b.n	80039a6 <_malloc_r+0x32>
 8003a40:	4634      	mov	r4, r6
 8003a42:	6876      	ldr	r6, [r6, #4]
 8003a44:	e7b9      	b.n	80039ba <_malloc_r+0x46>
 8003a46:	230c      	movs	r3, #12
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f000 f84c 	bl	8003ae8 <__malloc_unlock>
 8003a50:	e7a1      	b.n	8003996 <_malloc_r+0x22>
 8003a52:	6025      	str	r5, [r4, #0]
 8003a54:	e7de      	b.n	8003a14 <_malloc_r+0xa0>
 8003a56:	bf00      	nop
 8003a58:	20000180 	.word	0x20000180

08003a5c <_realloc_r>:
 8003a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a60:	4680      	mov	r8, r0
 8003a62:	4614      	mov	r4, r2
 8003a64:	460e      	mov	r6, r1
 8003a66:	b921      	cbnz	r1, 8003a72 <_realloc_r+0x16>
 8003a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	f7ff bf81 	b.w	8003974 <_malloc_r>
 8003a72:	b92a      	cbnz	r2, 8003a80 <_realloc_r+0x24>
 8003a74:	f7ff ff12 	bl	800389c <_free_r>
 8003a78:	4625      	mov	r5, r4
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	f000 f838 	bl	8003af4 <_malloc_usable_size_r>
 8003a84:	4284      	cmp	r4, r0
 8003a86:	4607      	mov	r7, r0
 8003a88:	d802      	bhi.n	8003a90 <_realloc_r+0x34>
 8003a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a8e:	d812      	bhi.n	8003ab6 <_realloc_r+0x5a>
 8003a90:	4621      	mov	r1, r4
 8003a92:	4640      	mov	r0, r8
 8003a94:	f7ff ff6e 	bl	8003974 <_malloc_r>
 8003a98:	4605      	mov	r5, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0ed      	beq.n	8003a7a <_realloc_r+0x1e>
 8003a9e:	42bc      	cmp	r4, r7
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	bf28      	it	cs
 8003aa6:	463a      	movcs	r2, r7
 8003aa8:	f7ff fed0 	bl	800384c <memcpy>
 8003aac:	4631      	mov	r1, r6
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fef4 	bl	800389c <_free_r>
 8003ab4:	e7e1      	b.n	8003a7a <_realloc_r+0x1e>
 8003ab6:	4635      	mov	r5, r6
 8003ab8:	e7df      	b.n	8003a7a <_realloc_r+0x1e>
	...

08003abc <_sbrk_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_sbrk_r+0x1c>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f7fc ff40 	bl	800094c <_sbrk>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_sbrk_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_sbrk_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000188 	.word	0x20000188

08003adc <__malloc_lock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__malloc_lock+0x8>)
 8003ade:	f000 b811 	b.w	8003b04 <__retarget_lock_acquire_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	2000018c 	.word	0x2000018c

08003ae8 <__malloc_unlock>:
 8003ae8:	4801      	ldr	r0, [pc, #4]	; (8003af0 <__malloc_unlock+0x8>)
 8003aea:	f000 b80c 	b.w	8003b06 <__retarget_lock_release_recursive>
 8003aee:	bf00      	nop
 8003af0:	2000018c 	.word	0x2000018c

08003af4 <_malloc_usable_size_r>:
 8003af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af8:	1f18      	subs	r0, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bfbc      	itt	lt
 8003afe:	580b      	ldrlt	r3, [r1, r0]
 8003b00:	18c0      	addlt	r0, r0, r3
 8003b02:	4770      	bx	lr

08003b04 <__retarget_lock_acquire_recursive>:
 8003b04:	4770      	bx	lr

08003b06 <__retarget_lock_release_recursive>:
 8003b06:	4770      	bx	lr

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
